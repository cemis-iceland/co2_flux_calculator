#### inputDir = path to data
#### first_m  = how many measurment to exclude at the start of the measurment
#### d        = inner diameter chamber [cm]
#### h        = height chamber [cm]
#### vadd     = additional volume through collar etc [m^3]
###span       = the smoothing parameter from fine (small values) to coarse (high value) this depend of the data so it needs to be empirically tested
###Use CO2M_Licor for licor data or CO2M for the sensor to accomodate for difference in Time formatting
#CO2M_Licor(inputDir = inputDir,first_m = 1, agd = 84.96,vadd = 0.00139339,span=0.3)
###Use CO2_M for your data02
CO2M(inputDir = inputDir,first_m = 2, d = 10.3,h = 0,vadd = 0.000989, span = 0.1)
#clear workspace from any previous entry
rm(list = ls())
#loading packages
library(ggplot2)
library(Cairo)
library(zoo)
library(dynlm)
library(gdata)
library(stringr)
#set working directory
setwd("/Users/Júlía Huang/Documents/LearningRR")
###loop
list.files()
###load the two necessary scripts
source("local_min_max.R") ###from package spatialEco https://github.com/jeffreyevans/spatialEco
source("CO2M_Licor.R")
source("CO2M.R")
#set the path to your input directory containing your csv files
inputDir <- "/Users/Júlía Huang/Documents/LearningRR/data/"
#run the function, flags are:
#### inputDir = path to data
#### first_m  = how many measurment to exclude at the start of the measurment
#### d        = inner diameter chamber [cm]
#### h        = height chamber [cm]
#### vadd     = additional volume through collar etc [m^3]
###span       = the smoothing parameter from fine (small values) to coarse (high value) this depend of the data so it needs to be empirically tested
###Use CO2M_Licor for licor data or CO2M for the sensor to accomodate for difference in Time formatting
#CO2M_Licor(inputDir = inputDir,first_m = 1, agd = 84.96,vadd = 0.00139339,span=0.3)
###Use CO2_M for your data02
CO2M(inputDir = inputDir,first_m = 0, d = 15.2,h = 4.2,vadd = 0.000335, span = 0.1)
#clear workspace from any previous entry
rm(list = ls())
#loading packages
library(ggplot2)
library(Cairo)
library(zoo)
library(dynlm)
library(gdata)
library(stringr)
#set working directory
setwd("/Users/Júlía Huang/Documents/LearningRR")
###loop
list.files()
###load the two necessary scripts
source("local_min_max.R") ###from package spatialEco https://github.com/jeffreyevans/spatialEco
source("CO2M_Licor.R")
source("CO2M.R")
#set the path to your input directory containing your csv files
inputDir <- "/Users/Júlía Huang/Documents/LearningRR/data/"
#run the function, flags are:
#### inputDir = path to data
#### first_m  = how many measurment to exclude at the start of the measurment
#### d        = inner diameter chamber [cm]
#### h        = height chamber [cm]
#### vadd     = additional volume through collar etc [m^3]
###span       = the smoothing parameter from fine (small values) to coarse (high value) this depend of the data so it needs to be empirically tested
###Use CO2M_Licor for licor data or CO2M for the sensor to accomodate for difference in Time formatting
#CO2M_Licor(inputDir = inputDir,first_m = 1, agd = 84.96,vadd = 0.00139339,span=0.3)
###Use CO2_M for your data02
CO2M(inputDir = inputDir,first_m = 0, d = 15.2,h = 4.2,vadd = 0.000335, span = 0.1)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
library("tidyverse")
# used in calculate_flux
calculate_flux_umol <- function(diameter, height, misc_vol, mean_t, slope){
d  <- diameter        #diameter chamber [cm]
h  <- height          #height chamber [cm]
vadd <- misc_vol      #additional volume through collar etc [m^3]
T1 <- mean_t +273.15  #average air temperature in relevant time window [K]
m  <- slope           #delta C/delta t [ppm/s]
vc  <- (pi*(d/2)^2*h)/ 10^6 #Volume [m^3]: area[cm^2](pi*diameter/4^2)*height[cm]*10^-6
v <- vc+vadd                #total volume [m^3]
v2 <- 22.4*10^-3            #molar volume for ideal gas at 273 K [m^3/mol]
T2 <- 273.15                #standard temperature [K]
A  <- pi*(d/2)^2*10^-4     #footprint area chamber [m^2]
return(m * (v/(v2*(T2/T1))) * 1/A) #soil CO2 flux [µmol/(m^2*s)]
}
# Main function
# Takes a data frame containing the following columns:
#   seconds : the number of seconds from the start of the measurement
#   co2     : the measured concentration of co2 in ppm
#   temp    : the measured temperature in degrees Celsius
# And takes the following parameters:
#   chamber_diameter    : The diameter of the chamber (used to calculate volume)
#   chamber_height      : The height of the chamber (used to calculate volume)
#   chamber_misc_volume : Volume of the collar and any non-cylindrical things.
# Returns a
calculate_fluxes <- function(
data, # seconds, co2, temp
chamber_diameter,
chamber_height,
chamber_misc_vol
){
# Find measurement periods (rising edges in concentration)
spans = find_slopes_periodic(data$seconds, data$co2)
fluxes <- spans %>% lapply(function(span){
# Calculate mean temperature
mean_t = mean(data[span$start:span$end, ]$temp)
# Calculate flux
flux_umol = calculate_flux_umol(
chamber_diameter,
chamber_height,
chamber_misc_vol,
mean_t,
span$slope
)
span$flux_umol <- flux_umol
span$mean_t <- mean_t
return(span)
})
return(fluxes)
}
plot_fluxes <- function(data, fluxes){
g <- ggplot(data, aes(x=seconds, y=co2)) + geom_point() + coord_cartesian(ylim=c(min(data$co2)-50,max(data$co2)+50))
for(i in 1:length(fluxes)){
span = fluxes[[i]]
g <- g + geom_abline(slope=span$slope, intercept=span$intercept, col="red") +
geom_point(data=span$points, aes(x=x, y=y), col="red") +
annotate("text",
x=last(span$points$x)-100,
y=last(span$points$y)+10,
label=sprintf("%f µmol/cm^2", span$flux_umol),
angle=70)
}
return(g)
}
filename = "kathy_data.csv"
# Csv file should have columns with the following exact names:
# time  co2  temp  humidity	location	diameter	height	misc_volume  notes
# And values should be provided as the following units
# time  ppm  C     %        text      cm        cm      m^3          text
data = read.csv(filename, dec=".", sep=";")
chamber_diameter = data$diameter[[1]]    # [cm]
chamber_height = data$height[[1]]        # [cm]
chamber_misc_vol = data$misc_volume[[1]] # [m^3]
if("location" %in% colnames(data)){
location = data$location[[1]]
} else {
location = "unspecified"
}
if("notes" %in% colnames(data)){
notes = data$notes[[1]]
} else {
notes = ""
}
# parse time
data$time <- as.POSIXct(strptime(data$time, "%d.%m.%y %H:%M:%S"))
# Add elapsed seconds column for linear regression
start_time = min(data$time)
data$seconds <- as.numeric(data$time - start_time)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
library("tidyverse")
# used in calculate_flux
calculate_flux_umol <- function(diameter, height, misc_vol, mean_t, slope){
d  <- diameter        #diameter chamber [cm]
h  <- height          #height chamber [cm]
vadd <- misc_vol      #additional volume through collar etc [m^3]
T1 <- mean_t +273.15  #average air temperature in relevant time window [K]
m  <- slope           #delta C/delta t [ppm/s]
vc  <- (pi*(d/2)^2*h)/ 10^6 #Volume [m^3]: area[cm^2](pi*diameter/4^2)*height[cm]*10^-6
v <- vc+vadd                #total volume [m^3]
v2 <- 22.4*10^-3            #molar volume for ideal gas at 273 K [m^3/mol]
T2 <- 273.15                #standard temperature [K]
A  <- pi*(d/2)^2*10^-4     #footprint area chamber [m^2]
return(m * (v/(v2*(T2/T1))) * 1/A) #soil CO2 flux [µmol/(m^2*s)]
}
# Main function
# Takes a data frame containing the following columns:
#   seconds : the number of seconds from the start of the measurement
#   co2     : the measured concentration of co2 in ppm
#   temp    : the measured temperature in degrees Celsius
# And takes the following parameters:
#   chamber_diameter    : The diameter of the chamber (used to calculate volume)
#   chamber_height      : The height of the chamber (used to calculate volume)
#   chamber_misc_volume : Volume of the collar and any non-cylindrical things.
# Returns a
calculate_fluxes <- function(
data, # seconds, co2, temp
chamber_diameter,
chamber_height,
chamber_misc_vol
){
# Find measurement periods (rising edges in concentration)
spans = find_slopes_periodic(data$seconds, data$co2)
fluxes <- spans %>% lapply(function(span){
# Calculate mean temperature
mean_t = mean(data[span$start:span$end, ]$temp)
# Calculate flux
flux_umol = calculate_flux_umol(
chamber_diameter,
chamber_height,
chamber_misc_vol,
mean_t,
span$slope
)
span$flux_umol <- flux_umol
span$mean_t <- mean_t
return(span)
})
return(fluxes)
}
plot_fluxes <- function(data, fluxes){
g <- ggplot(data, aes(x=seconds, y=co2)) + geom_point() + coord_cartesian(ylim=c(min(data$co2)-50,max(data$co2)+50))
for(i in 1:length(fluxes)){
span = fluxes[[i]]
g <- g + geom_abline(slope=span$slope, intercept=span$intercept, col="red") +
geom_point(data=span$points, aes(x=x, y=y), col="red") +
annotate("text",
x=last(span$points$x)-100,
y=last(span$points$y)+10,
label=sprintf("%f µmol/cm^2", span$flux_umol),
angle=70)
}
return(g)
}
filename = "kathy_data.csv"
# Csv file should have columns with the following exact names:
# time  co2  temp  humidity	location	diameter	height	misc_volume  notes
# And values should be provided as the following units
# time  ppm  C     %        text      cm        cm      m^3          text
data = read.csv(filename, dec=".", sep=";")
chamber_diameter = data$diameter[[1]]    # [cm]
chamber_height = data$height[[1]]        # [cm]
chamber_misc_vol = data$misc_volume[[1]] # [m^3]
if("location" %in% colnames(data)){
location = data$location[[1]]
} else {
location = "unspecified"
}
if("notes" %in% colnames(data)){
notes = data$notes[[1]]
} else {
notes = ""
}
# parse time
data$time <- as.POSIXct(strptime(data$time, "%d.%m.%y %H:%M:%S"))
# Add elapsed seconds column for linear regression
start_time = min(data$time)
data$seconds <- as.numeric(data$time - start_time)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
plot_fluxes(data, fluxes)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
fluxes <- calculate_fluxes(
fluxes <- calculate_fluxes(
fluxes <- calculate_fluxes(
# Exclude short spans to eliminate noise
spans <- dplyr::filter(spans, len > min_span)
source("find_slopes.R")
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
plot_fluxes(data, fluxes)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
plot_fluxes(data, fluxes)
help(lmrob)
# Then simply perform a robust linear regression to find the slope of best fit
fit = lmrob(y ~ x, span, method="KS2014", init="S")
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
library(pastecs)
library(signal)
library(robustbase)
library(dplyr)
find_slopes_periodic <- function(xs, ys, min_span=6){
# We split the data into spans representing individual measurement periods
# Smooth the data and find minima and maxima
smoothed = filtfilt(butter(4, 0.3, "low"), ys - mean(ys)) # Complete guess
extrema = turnpoints(smoothed)
plot(smoothed)
# Split the list into sections starting with minima and ending with maxima
if (extrema$firstispeak) { # Drop first if it's a maximum
extrema$tppos <- extrema$tppos[-1]
}
# If list can't be split into pairs cleanly drop the last index
if (length(extrema$tppos) %% 2 != 0){
extrema$tppos <- extrema$tppos[-length(extrema$tppos)]
}
# Split list into (minimum, maximum) pairs
pairs = split(extrema$tppos, ceiling(seq_along(extrema$tppos)/2))
# Compute length for each span and convert the list to a data frame
spans = bind_rows(pairs %>% lapply(function(span){
return(list(start=span[1], end=span[2], len=span[2] - span[1]))
}))
# Exclude short spans to eliminate noise
spans <- dplyr::filter(spans, len > min_span)
# For each span, find the slope
slopes <- spans %>% apply(1, function(row){
span <- tibble(x=xs[row["start"]:row["end"]], y=ys[row["start"]:row["end"]])
# The start and end may have artifacts, so discard them
range = max(span$y) - min(span$y)
lower = min(span$y) + 0.10 * range # These percentages can be adjusted to
upper = max(span$y) - 0.00 * range # change how much data is discarded
span <- span %>% dplyr::filter(y > lower) %>% dplyr::filter(y < upper)
# Then simply perform a robust linear regression to find the slope of best fit
fit = lmrob(y ~ x, span, method="KS2014", init="M-S")
return(list(
start=row["start"],
end=row["end"],
points=span,
fit=fit,
slope=fit$coefficients[[2]],
intercept=fit$coefficients[[1]]))
})
return(slopes)
}
source("find_slopes.R")
library("tidyverse")
# used in calculate_flux
calculate_flux_umol <- function(diameter, height, misc_vol, mean_t, slope){
d  <- diameter        #diameter chamber [cm]
h  <- height          #height chamber [cm]
vadd <- misc_vol      #additional volume through collar etc [m^3]
T1 <- mean_t +273.15  #average air temperature in relevant time window [K]
m  <- slope           #delta C/delta t [ppm/s]
vc  <- (pi*(d/2)^2*h)/ 10^6 #Volume [m^3]: area[cm^2](pi*diameter/4^2)*height[cm]*10^-6
v <- vc+vadd                #total volume [m^3]
v2 <- 22.4*10^-3            #molar volume for ideal gas at 273 K [m^3/mol]
T2 <- 273.15                #standard temperature [K]
A  <- pi*(d/2)^2*10^-4     #footprint area chamber [m^2]
return(m * (v/(v2*(T2/T1))) * 1/A) #soil CO2 flux [µmol/(m^2*s)]
}
# Main function
# Takes a data frame containing the following columns:
#   seconds : the number of seconds from the start of the measurement
#   co2     : the measured concentration of co2 in ppm
#   temp    : the measured temperature in degrees Celsius
# And takes the following parameters:
#   chamber_diameter    : The diameter of the chamber (used to calculate volume)
#   chamber_height      : The height of the chamber (used to calculate volume)
#   chamber_misc_volume : Volume of the collar and any non-cylindrical things.
# Returns a
calculate_fluxes <- function(
data, # seconds, co2, temp
chamber_diameter,
chamber_height,
chamber_misc_vol
){
# Find measurement periods (rising edges in concentration)
spans = find_slopes_periodic(data$seconds, data$co2)
fluxes <- spans %>% lapply(function(span){
# Calculate mean temperature
mean_t = mean(data[span$start:span$end, ]$temp)
# Calculate flux
flux_umol = calculate_flux_umol(
chamber_diameter,
chamber_height,
chamber_misc_vol,
mean_t,
span$slope
)
span$flux_umol <- flux_umol
span$mean_t <- mean_t
return(span)
})
return(fluxes)
}
plot_fluxes <- function(data, fluxes){
g <- ggplot(data, aes(x=seconds, y=co2)) + geom_point() + coord_cartesian(ylim=c(min(data$co2)-50,max(data$co2)+50))
for(i in 1:length(fluxes)){
span = fluxes[[i]]
g <- g + geom_abline(slope=span$slope, intercept=span$intercept, col="red") +
geom_point(data=span$points, aes(x=x, y=y), col="red") +
annotate("text",
x=last(span$points$x)-100,
y=last(span$points$y)+10,
label=sprintf("%f µmol/cm^2", span$flux_umol),
angle=70)
}
return(g)
}
filename = "kathy_data.csv"
# Csv file should have columns with the following exact names:
# time  co2  temp  humidity	location	diameter	height	misc_volume  notes
# And values should be provided as the following units
# time  ppm  C     %        text      cm        cm      m^3          text
data = read.csv(filename, dec=".", sep=";")
chamber_diameter = data$diameter[[1]]    # [cm]
chamber_height = data$height[[1]]        # [cm]
chamber_misc_vol = data$misc_volume[[1]] # [m^3]
if("location" %in% colnames(data)){
location = data$location[[1]]
} else {
location = "unspecified"
}
if("notes" %in% colnames(data)){
notes = data$notes[[1]]
} else {
notes = ""
}
# parse time
data$time <- as.POSIXct(strptime(data$time, "%d.%m.%y %H:%M:%S"))
# Add elapsed seconds column for linear regression
start_time = min(data$time)
data$seconds <- as.numeric(data$time - start_time)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
vignette(lmrob)
vignette("lmrob")
vignette(search="lmrob")
vignette("lmrob", package = "robustbase")
help(lmrob)
source("find_slopes.R")
fluxes <- calculate_fluxes(
data = data,
chamber_diameter = chamber_diameter,
chamber_height = chamber_height,
chamber_misc_vol = chamber_misc_vol
)
plot_fluxes(data, fluxes)
